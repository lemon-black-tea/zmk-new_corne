#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        home_pgup: home_pgup {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp PAGE_UP>;

            label = "HOME_PGUP";
        };

        end_pgdown: end_pgdown {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp PAGE_DOWN>;

            label = "END_PGDOWN";
        };

        prev_vdown: prev_vdown {
            compatible = "zmk,behavior-tap-dance";
            label = "PREV_VDOWN";
            #binding-cells = <0>;
            bindings = <&kp C_PREV>, <&kp C_VOLUME_DOWN>;
        };

        next_vup: next_vup {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT_VUP";
            #binding-cells = <0>;
            bindings = <&kp C_NEXT>, <&kp C_VOLUME_UP>;
        };

        pause_mute: pause_mute {
            compatible = "zmk,behavior-tap-dance";
            label = "PAUSE_MUTE";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_MUTE>;
        };

        searchFiles_clipboard: searchFiles_clipboard {
            compatible = "zmk,behavior-tap-dance";
            label = "SEARCHFILES_CLIPBOARD";
            #binding-cells = <0>;
            bindings = <&kp LS(SPACE)>, <&kp LG(LA(LC(PERIOD)))>;
        };

        searchMenu_IME: searchMenu_IME {
            compatible = "zmk,behavior-tap-dance";
            label = "SEARCHMENU_IME";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(SPACE)))>, <&kp LA(LC(SPACE))>;
        };

        i_hui_sat: i_hui_sat {
            compatible = "zmk,behavior-tap-dance";
            label = "I_HUI_SAT";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_SAI>;
        };

        d_hui_sat: d_hui_sat {
            compatible = "zmk,behavior-tap-dance";
            label = "D_HUI_SAT";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUD>, <&rgb_ug RGB_SAD>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    macros {
        goldendict: goldendict {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C) &kp LG(C)>;
            label = "goldendict";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "base";
            bindings = <
&kp LG(SPACE)  &kp Q        &kp W         &kp F           &kp P            &kp B                                           &none         &kp J                            &kp L        &kp U       &kp Y        &kp APOSTROPHE  &searchFiles_clipboard
&tog 2         &mt LCTRL A  &mt LSHIFT R  &mt LEFT_ALT S  &mt LCMD T       &mt LG(LA(LS(LEFT_CONTROL))) G           &none  &none  &none  &mt RG(RA(RS(RIGHT_CONTROL))) M  &mt RCMD N   &mt RALT E  &mt RSHFT I  &mt RCTRL O     &searchMenu_IME
&kp LC(SPACE)  &kp Z        &kp X         &kp C           &kp D            &kp V                           &none           &none         &kp K                            &kp H        &kp COMMA   &kp PERIOD   &kp SEMI        &goldendict
                                          &lt 1 DELETE    &lt 2 BACKSPACE  &lt 5 ESCAPE                                                  &lt 5 RETURN                     &lt 3 SPACE  &lt 1 TAB
            >;

            // sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        num-row {
            bindings = <
&trans  &kp N4           &kp N3               &kp N2               &kp N1                 &kp N0                                        &trans          &kp N5                      &kp N6                  &kp N7                &kp N8                  &kp N9               &trans
&trans  &mt LCTRL SLASH  &mt LSHFT LESS_THAN  &mt LALT LEFT_BRACE  &mt LGUI LEFT_BRACKET  &mt LG(LA(LS(LCTRL))) LPAR            &trans  &trans  &trans  &mt RG(RA(RS(RCTRL))) RPAR  &mt RGUI RIGHT_BRACKET  &mt RALT RIGHT_BRACE  &mt RSHFT GREATER_THAN  &mt RCTRL BACKSLASH  &trans
&trans  &trans           &trans               &trans               &trans                 &trans                      &trans            &trans          &trans                      &trans                  &trans                &trans                  &trans               &trans
                                              &trans               &trans                 &trans                                                        &trans                      &trans                  &trans
            >;
        };

        Symbol {
            label = "sym";
            bindings = <
&none  &kp CARET           &kp TILDE              &kp EQUAL       &kp UNDERSCORE  &kp ASTERISK                                 &none         &kp HASH                      &kp AT          &kp AMPS            &kp DOLLAR                &kp PERCENT            &none
&none  &mt LCTRL QUESTION  &mt LSHIFT APOSTROPHE  &mt LALT COLON  &mt LGUI PLUS   &mt LG(LA(LS(LCTRL))) COMMA           &none  &none  &none  &mt RG(RA(RS(RCTRL))) PERIOD  &mt RGUI MINUS  &mt RALT SEMICOLON  &mt RSHIFT DOUBLE_QUOTES  &mt RCTRL EXCLAMATION  &none
&none  &none               &none                  &none           &none           &none                        &none           &none         &none                         &none           &none               &none                     &none                  &none
                                                  &trans          &trans          &trans                                                     &trans                        &trans          &trans
            >;
        };

        Navigation {
            display-name = "nav";
            bindings = <
&none  &none      &none      &none     &none     &none                                         &none         &none         &kp LA(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)    &none        &none
&none  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LCMD  &kp LG(LA(LS(LEFT_CONTROL)))           &none  &none  &none  &kp LG(HOME)  &kp LEFT      &kp DOWN      &kp RIGHT_ARROW  &kp LG(END)  &none
&none  &none      &none      &none     &none     &none                         &none           &none         &none         &kp LG(LEFT)  &none         &kp LG(RIGHT)    &none        &none
                             &trans    &trans    &trans                                                      &trans        &trans        &trans
            >;
        };

        num-pad {
            bindings = <
&none  &kp LG(LS(V))  &kp LG(V)  &kp LG(LA(LS(C)))  &kp LG(LS(C))  &kp LG(C)                  &none         &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTRK   &none
&none  &trans         &trans     &trans             &trans         &trans              &none  &none  &none  &kp N0     &kp N4  &kp N5  &kp N6  &kp PERIOD  &none
&none  &kp LG(D)      &kp LG(B)  &kp LG(LS(Z))      &kp LG(Z)      &kp LG(X)  &none           &none         &kp MINUS  &kp N1  &kp N2  &kp N3  &kp SLASH   &none
                                 &trans             &trans         &trans                                   &trans     &trans  &trans
            >;

            label = "numpad";
        };

        SymbolR {
            bindings = <
&none  &none      &kp PAGE_UP    &kp HOME  &kp LG(LEFT_BRACKET)   &kp LG(LS(T))                                 &none         &kp PLUS        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none      &none          &none
&none  &kp LCTRL  &kp LSHIFT     &kp LALT  &kp LCMD               &kp LG(LA(LS(LEFT_CONTROL)))           &none  &none  &none  &kp MINUS       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SLASH  &kp BACKSLASH  &none
&none  &none      &kp PAGE_DOWN  &kp END   &kp LG(RIGHT_BRACKET)  &kp LG(LS(H))                 &none           &none         &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &none      &none          &none
                                 &trans    &trans                 &trans                                                      &trans          &trans                &trans
            >;

            label = "symR";
        };

        ControlL {
            bindings = <
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &kp C_NEXT        &kp C_VOLUME_UP    &kp C_BRIGHTNESS_INC                  &none         &none   &none   &none   &none  &none  &none
&bt BT_CLR_ALL   &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &kp C_PLAY_PAUSE  &kp C_MUTE         &kp LC(LG(Q))                  &none  &none  &none  &none   &none   &none   &none  &none  &none
&bootloader      &d_hui_sat       &i_hui_sat       &kp C_PREV        &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_DEC  &none           &none         &none   &none   &none   &none  &none  &none
                                                   &trans            &trans             &trans                                              &trans  &trans  &trans
            >;

            label = "controlL";
        };

        ControlR {
            bindings = <
&none  &none  &none  &none   &none   &none                   &none         &kp LC(LS(NUMBER_1))  &kp LC(LS(NUMBER_4))  &kp LA(LS(LC(LEFT_ARROW)))  &kp LA(LS(LC(RIGHT_ARROW)))  &none        &none
&none  &none  &none  &none   &none   &none            &none  &none  &none  &kp LC(LS(NUMBER_2))  &kp LC(LS(NUMBER_5))  &kp LA(LS(LC(M)))           &kp LA(LS(LC(C)))            &kp LG(TAB)  &none
&none  &none  &none  &none   &none   &none   &none           &none         &kp LC(LS(NUMBER_3))  &kp LC(LS(NUMBER_6))  &kp LA(LS(LC(F)))           &kp LG(Q)                    &none        &bootloader
                     &trans  &trans  &trans                                &trans                &trans                &trans
            >;

            label = "controlR";
        };
    };
};
