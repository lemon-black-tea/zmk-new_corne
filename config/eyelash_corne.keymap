#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        home_pgup: home_pgup {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp PAGE_UP>;

            label = "HOME_PGUP";
        };

        end_pgdown: end_pgdown {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp PAGE_DOWN>;

            label = "END_PGDOWN";
        };

        prev_vdown: prev_vdown {
            compatible = "zmk,behavior-tap-dance";
            label = "PREV_VDOWN";
            #binding-cells = <0>;
            bindings = <&kp C_PREV>, <&kp C_VOLUME_DOWN>;
        };

        next_vup: next_vup {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT_VUP";
            #binding-cells = <0>;
            bindings = <&kp C_NEXT>, <&kp C_VOLUME_UP>;
        };

        pause_mute: pause_mute {
            compatible = "zmk,behavior-tap-dance";
            label = "PAUSE_MUTE";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_MUTE>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "base";
            bindings = <
&rgb_ug RGB_TOG  &kp Q        &kp W         &kp F           &kp P        &kp B                                   &none         &kp J                   &kp L            &kp U             &kp Y              &kp GRAVE    &none
&bt BT_CLR_ALL   &mt LCTRL A  &mt LSHIFT R  &mt LEFT_ALT S  &mt LCMD T   &mt LS(LA(LC(LCMD))) G           &none  &none  &none  &mt RS(RA(RC(RCMD))) M  &mt RCMD N       &mt RALT E        &mt RSHFT I        &mt RCTRL O  &none
&none            &kp Z        &kp X         &kp C           &kp D        &kp V                   &none           &none         &kp K                   &kp H            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp FSLH     &none
                                            &lt 6 ESC       &lt 2 SPACE  &lt 4 TAB                                             &lt 3 ENTER             &lt 1 BACKSPACE  &lt 5 DELETE
            >;

            // sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Navigation {
            display-name = "nav";
            bindings = <
&none  &none      &none      &none     &none     &none                                 &none         &none   &kp HOME     &kp UP_ARROW  &kp END          &none  &none
&none  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LCMD  &kp LS(LA(LC(LCMD)))           &none  &none  &none  &none   &kp LEFT     &kp DOWN      &kp RIGHT_ARROW  &none  &none
&none  &none      &none      &none     &none     &none                 &none           &none         &none   &kp PAGE_UP  &none         &kp PAGE_DOWN    &none  &none
                             &trans    &trans    &trans                                              &trans  &trans       &trans
            >;
        };

        Number {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTRK   &kp KP_NUMLOCK
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp N0     &kp N4  &kp N5  &kp N6  &kp PERIOD  &none
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp MINUS  &kp N1  &kp N2  &kp N3  &kp SLASH   &none
                        &trans  &trans  &trans                                    &trans     &trans  &trans
            >;

            label = "num";
        };

        SymbolL {
            label = "symL";
            bindings = <
&none  &none      &kp PERCENT  &kp ASTERISK   &kp PIPE        &kp BACKSLASH                    &none         &none                 &none     &none     &none       &none              &none
&none  &kp CARET  &kp DOLLAR   &kp AT_SIGN    &kp HASH        &kp QUESTION              &none  &none  &none  &kp RS(RA(RC(RCMD)))  &kp RCMD  &kp RALT  &kp RSHIFT  &kp RIGHT_CONTROL  &none
&none  &none      &kp TILDE    &kp AMPERSAND  &kp UNDERSCORE  &kp EXCLAMATION  &none           &none         &none                 &none     &none     &none       &none              &none
                               &trans         &trans          &trans                                         &trans                &trans    &trans
            >;
        };

        SymbolR {
            bindings = <
&none  &none      &none       &none     &none     &none                                 &none         &kp PLUS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON       &kp SEMICOLON      &none
&none  &kp LCTRL  &kp LSHIFT  &kp LALT  &kp LCMD  &kp LS(LA(LC(LCMD)))           &none  &none  &none  &kp MINUS  &kp LESS_THAN         &kp GREATER_THAN       &kp COMMA       &kp PERIOD         &none
&none  &none      &none       &none     &none     &none                 &none           &none         &kp EQUAL  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp APOSTROPHE  &kp DOUBLE_QUOTES  &none
                              &trans    &trans    &trans                                              &trans     &trans                &trans
            >;

            label = "symR";
        };

        ControlL {
            bindings = <
&trans  &trans  &trans  &trans  &next_vup    &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &pause_mute  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &prev_vdown  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans       &trans                                    &trans  &trans  &trans
            >;

            label = "controlL";
        };

        ControlR {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            label = "controlR";
        };
    };
};
